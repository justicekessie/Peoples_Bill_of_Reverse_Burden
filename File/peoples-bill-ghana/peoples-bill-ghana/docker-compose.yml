version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pbp-postgres
    environment:
      POSTGRES_USER: pbp_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: peoples_bill_ghana
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - pbp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pbp_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and queues)
  redis:
    image: redis:7-alpine
    container_name: pbp-redis
    ports:
      - "6379:6379"
    networks:
      - pbp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pbp-backend
    environment:
      DATABASE_URL: postgresql://pbp_user:${DB_PASSWORD:-changeme}@postgres:5432/peoples_bill_ghana
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENVIRONMENT: production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pbp-network
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pbp-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - pbp-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: pbp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - pbp-network

networks:
  pbp-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
